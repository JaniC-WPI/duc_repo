// Generated by gencpp from file scara_command/CheckKinIKResponse.msg
// DO NOT EDIT!


#ifndef SCARA_COMMAND_MESSAGE_CHECKKINIKRESPONSE_H
#define SCARA_COMMAND_MESSAGE_CHECKKINIKRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace scara_command
{
template <class ContainerAllocator>
struct CheckKinIKResponse_
{
  typedef CheckKinIKResponse_<ContainerAllocator> Type;

  CheckKinIKResponse_()
    : state_q1(0.0)
    , state_q2(0.0)
    , state_q3(0.0)
    , ik_q1(0.0)
    , ik_q2(0.0)
    , ik_q3(0.0)
    , correct(false)  {
    }
  CheckKinIKResponse_(const ContainerAllocator& _alloc)
    : state_q1(0.0)
    , state_q2(0.0)
    , state_q3(0.0)
    , ik_q1(0.0)
    , ik_q2(0.0)
    , ik_q3(0.0)
    , correct(false)  {
  (void)_alloc;
    }



   typedef float _state_q1_type;
  _state_q1_type state_q1;

   typedef float _state_q2_type;
  _state_q2_type state_q2;

   typedef float _state_q3_type;
  _state_q3_type state_q3;

   typedef float _ik_q1_type;
  _ik_q1_type ik_q1;

   typedef float _ik_q2_type;
  _ik_q2_type ik_q2;

   typedef float _ik_q3_type;
  _ik_q3_type ik_q3;

   typedef uint8_t _correct_type;
  _correct_type correct;





  typedef boost::shared_ptr< ::scara_command::CheckKinIKResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scara_command::CheckKinIKResponse_<ContainerAllocator> const> ConstPtr;

}; // struct CheckKinIKResponse_

typedef ::scara_command::CheckKinIKResponse_<std::allocator<void> > CheckKinIKResponse;

typedef boost::shared_ptr< ::scara_command::CheckKinIKResponse > CheckKinIKResponsePtr;
typedef boost::shared_ptr< ::scara_command::CheckKinIKResponse const> CheckKinIKResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scara_command::CheckKinIKResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scara_command::CheckKinIKResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::scara_command::CheckKinIKResponse_<ContainerAllocator1> & lhs, const ::scara_command::CheckKinIKResponse_<ContainerAllocator2> & rhs)
{
  return lhs.state_q1 == rhs.state_q1 &&
    lhs.state_q2 == rhs.state_q2 &&
    lhs.state_q3 == rhs.state_q3 &&
    lhs.ik_q1 == rhs.ik_q1 &&
    lhs.ik_q2 == rhs.ik_q2 &&
    lhs.ik_q3 == rhs.ik_q3 &&
    lhs.correct == rhs.correct;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::scara_command::CheckKinIKResponse_<ContainerAllocator1> & lhs, const ::scara_command::CheckKinIKResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace scara_command

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::scara_command::CheckKinIKResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scara_command::CheckKinIKResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scara_command::CheckKinIKResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scara_command::CheckKinIKResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scara_command::CheckKinIKResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scara_command::CheckKinIKResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scara_command::CheckKinIKResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "36714075758334348b25a38f8ec94251";
  }

  static const char* value(const ::scara_command::CheckKinIKResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3671407575833434ULL;
  static const uint64_t static_value2 = 0x8b25a38f8ec94251ULL;
};

template<class ContainerAllocator>
struct DataType< ::scara_command::CheckKinIKResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scara_command/CheckKinIKResponse";
  }

  static const char* value(const ::scara_command::CheckKinIKResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scara_command::CheckKinIKResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 state_q1\n"
"float32 state_q2\n"
"float32 state_q3\n"
"float32 ik_q1\n"
"float32 ik_q2\n"
"float32 ik_q3\n"
"bool correct\n"
"\n"
;
  }

  static const char* value(const ::scara_command::CheckKinIKResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scara_command::CheckKinIKResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state_q1);
      stream.next(m.state_q2);
      stream.next(m.state_q3);
      stream.next(m.ik_q1);
      stream.next(m.ik_q2);
      stream.next(m.ik_q3);
      stream.next(m.correct);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CheckKinIKResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scara_command::CheckKinIKResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scara_command::CheckKinIKResponse_<ContainerAllocator>& v)
  {
    s << indent << "state_q1: ";
    Printer<float>::stream(s, indent + "  ", v.state_q1);
    s << indent << "state_q2: ";
    Printer<float>::stream(s, indent + "  ", v.state_q2);
    s << indent << "state_q3: ";
    Printer<float>::stream(s, indent + "  ", v.state_q3);
    s << indent << "ik_q1: ";
    Printer<float>::stream(s, indent + "  ", v.ik_q1);
    s << indent << "ik_q2: ";
    Printer<float>::stream(s, indent + "  ", v.ik_q2);
    s << indent << "ik_q3: ";
    Printer<float>::stream(s, indent + "  ", v.ik_q3);
    s << indent << "correct: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.correct);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCARA_COMMAND_MESSAGE_CHECKKINIKRESPONSE_H
