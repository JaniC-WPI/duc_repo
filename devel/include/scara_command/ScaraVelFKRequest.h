// Generated by gencpp from file scara_command/ScaraVelFKRequest.msg
// DO NOT EDIT!


#ifndef SCARA_COMMAND_MESSAGE_SCARAVELFKREQUEST_H
#define SCARA_COMMAND_MESSAGE_SCARAVELFKREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace scara_command
{
template <class ContainerAllocator>
struct ScaraVelFKRequest_
{
  typedef ScaraVelFKRequest_<ContainerAllocator> Type;

  ScaraVelFKRequest_()
    : q1(0.0)
    , q2(0.0)
    , q3(0.0)
    , q1_dot(0.0)
    , q2_dot(0.0)
    , q3_dot(0.0)  {
    }
  ScaraVelFKRequest_(const ContainerAllocator& _alloc)
    : q1(0.0)
    , q2(0.0)
    , q3(0.0)
    , q1_dot(0.0)
    , q2_dot(0.0)
    , q3_dot(0.0)  {
  (void)_alloc;
    }



   typedef float _q1_type;
  _q1_type q1;

   typedef float _q2_type;
  _q2_type q2;

   typedef float _q3_type;
  _q3_type q3;

   typedef float _q1_dot_type;
  _q1_dot_type q1_dot;

   typedef float _q2_dot_type;
  _q2_dot_type q2_dot;

   typedef float _q3_dot_type;
  _q3_dot_type q3_dot;





  typedef boost::shared_ptr< ::scara_command::ScaraVelFKRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scara_command::ScaraVelFKRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ScaraVelFKRequest_

typedef ::scara_command::ScaraVelFKRequest_<std::allocator<void> > ScaraVelFKRequest;

typedef boost::shared_ptr< ::scara_command::ScaraVelFKRequest > ScaraVelFKRequestPtr;
typedef boost::shared_ptr< ::scara_command::ScaraVelFKRequest const> ScaraVelFKRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scara_command::ScaraVelFKRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scara_command::ScaraVelFKRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::scara_command::ScaraVelFKRequest_<ContainerAllocator1> & lhs, const ::scara_command::ScaraVelFKRequest_<ContainerAllocator2> & rhs)
{
  return lhs.q1 == rhs.q1 &&
    lhs.q2 == rhs.q2 &&
    lhs.q3 == rhs.q3 &&
    lhs.q1_dot == rhs.q1_dot &&
    lhs.q2_dot == rhs.q2_dot &&
    lhs.q3_dot == rhs.q3_dot;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::scara_command::ScaraVelFKRequest_<ContainerAllocator1> & lhs, const ::scara_command::ScaraVelFKRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace scara_command

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::scara_command::ScaraVelFKRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scara_command::ScaraVelFKRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scara_command::ScaraVelFKRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scara_command::ScaraVelFKRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scara_command::ScaraVelFKRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scara_command::ScaraVelFKRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scara_command::ScaraVelFKRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ba07bacd8d1696f2c8c4790cdda99b2a";
  }

  static const char* value(const ::scara_command::ScaraVelFKRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xba07bacd8d1696f2ULL;
  static const uint64_t static_value2 = 0xc8c4790cdda99b2aULL;
};

template<class ContainerAllocator>
struct DataType< ::scara_command::ScaraVelFKRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scara_command/ScaraVelFKRequest";
  }

  static const char* value(const ::scara_command::ScaraVelFKRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scara_command::ScaraVelFKRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 q1\n"
"float32 q2\n"
"float32 q3\n"
"float32 q1_dot\n"
"float32 q2_dot\n"
"float32 q3_dot\n"
;
  }

  static const char* value(const ::scara_command::ScaraVelFKRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scara_command::ScaraVelFKRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.q1);
      stream.next(m.q2);
      stream.next(m.q3);
      stream.next(m.q1_dot);
      stream.next(m.q2_dot);
      stream.next(m.q3_dot);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ScaraVelFKRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scara_command::ScaraVelFKRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scara_command::ScaraVelFKRequest_<ContainerAllocator>& v)
  {
    s << indent << "q1: ";
    Printer<float>::stream(s, indent + "  ", v.q1);
    s << indent << "q2: ";
    Printer<float>::stream(s, indent + "  ", v.q2);
    s << indent << "q3: ";
    Printer<float>::stream(s, indent + "  ", v.q3);
    s << indent << "q1_dot: ";
    Printer<float>::stream(s, indent + "  ", v.q1_dot);
    s << indent << "q2_dot: ";
    Printer<float>::stream(s, indent + "  ", v.q2_dot);
    s << indent << "q3_dot: ";
    Printer<float>::stream(s, indent + "  ", v.q3_dot);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCARA_COMMAND_MESSAGE_SCARAVELFKREQUEST_H
