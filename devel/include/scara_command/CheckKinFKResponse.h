// Generated by gencpp from file scara_command/CheckKinFKResponse.msg
// DO NOT EDIT!


#ifndef SCARA_COMMAND_MESSAGE_CHECKKINFKRESPONSE_H
#define SCARA_COMMAND_MESSAGE_CHECKKINFKRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace scara_command
{
template <class ContainerAllocator>
struct CheckKinFKResponse_
{
  typedef CheckKinFKResponse_<ContainerAllocator> Type;

  CheckKinFKResponse_()
    : state_x(0.0)
    , state_y(0.0)
    , state_z(0.0)
    , state_phi(0.0)
    , state_theta(0.0)
    , state_psi(0.0)
    , fk_x(0.0)
    , fk_y(0.0)
    , fk_z(0.0)
    , fk_phi(0.0)
    , fk_theta(0.0)
    , fk_psi(0.0)
    , correct(false)  {
    }
  CheckKinFKResponse_(const ContainerAllocator& _alloc)
    : state_x(0.0)
    , state_y(0.0)
    , state_z(0.0)
    , state_phi(0.0)
    , state_theta(0.0)
    , state_psi(0.0)
    , fk_x(0.0)
    , fk_y(0.0)
    , fk_z(0.0)
    , fk_phi(0.0)
    , fk_theta(0.0)
    , fk_psi(0.0)
    , correct(false)  {
  (void)_alloc;
    }



   typedef float _state_x_type;
  _state_x_type state_x;

   typedef float _state_y_type;
  _state_y_type state_y;

   typedef float _state_z_type;
  _state_z_type state_z;

   typedef float _state_phi_type;
  _state_phi_type state_phi;

   typedef float _state_theta_type;
  _state_theta_type state_theta;

   typedef float _state_psi_type;
  _state_psi_type state_psi;

   typedef float _fk_x_type;
  _fk_x_type fk_x;

   typedef float _fk_y_type;
  _fk_y_type fk_y;

   typedef float _fk_z_type;
  _fk_z_type fk_z;

   typedef float _fk_phi_type;
  _fk_phi_type fk_phi;

   typedef float _fk_theta_type;
  _fk_theta_type fk_theta;

   typedef float _fk_psi_type;
  _fk_psi_type fk_psi;

   typedef uint8_t _correct_type;
  _correct_type correct;





  typedef boost::shared_ptr< ::scara_command::CheckKinFKResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scara_command::CheckKinFKResponse_<ContainerAllocator> const> ConstPtr;

}; // struct CheckKinFKResponse_

typedef ::scara_command::CheckKinFKResponse_<std::allocator<void> > CheckKinFKResponse;

typedef boost::shared_ptr< ::scara_command::CheckKinFKResponse > CheckKinFKResponsePtr;
typedef boost::shared_ptr< ::scara_command::CheckKinFKResponse const> CheckKinFKResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scara_command::CheckKinFKResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scara_command::CheckKinFKResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::scara_command::CheckKinFKResponse_<ContainerAllocator1> & lhs, const ::scara_command::CheckKinFKResponse_<ContainerAllocator2> & rhs)
{
  return lhs.state_x == rhs.state_x &&
    lhs.state_y == rhs.state_y &&
    lhs.state_z == rhs.state_z &&
    lhs.state_phi == rhs.state_phi &&
    lhs.state_theta == rhs.state_theta &&
    lhs.state_psi == rhs.state_psi &&
    lhs.fk_x == rhs.fk_x &&
    lhs.fk_y == rhs.fk_y &&
    lhs.fk_z == rhs.fk_z &&
    lhs.fk_phi == rhs.fk_phi &&
    lhs.fk_theta == rhs.fk_theta &&
    lhs.fk_psi == rhs.fk_psi &&
    lhs.correct == rhs.correct;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::scara_command::CheckKinFKResponse_<ContainerAllocator1> & lhs, const ::scara_command::CheckKinFKResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace scara_command

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::scara_command::CheckKinFKResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scara_command::CheckKinFKResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scara_command::CheckKinFKResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scara_command::CheckKinFKResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scara_command::CheckKinFKResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scara_command::CheckKinFKResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scara_command::CheckKinFKResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6dd4bd6e62545926c2a7502c0ee7c4f1";
  }

  static const char* value(const ::scara_command::CheckKinFKResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6dd4bd6e62545926ULL;
  static const uint64_t static_value2 = 0xc2a7502c0ee7c4f1ULL;
};

template<class ContainerAllocator>
struct DataType< ::scara_command::CheckKinFKResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scara_command/CheckKinFKResponse";
  }

  static const char* value(const ::scara_command::CheckKinFKResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scara_command::CheckKinFKResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 state_x\n"
"float32 state_y\n"
"float32 state_z\n"
"float32 state_phi\n"
"float32 state_theta\n"
"float32 state_psi\n"
"float32 fk_x\n"
"float32 fk_y\n"
"float32 fk_z\n"
"float32 fk_phi\n"
"float32 fk_theta\n"
"float32 fk_psi\n"
"bool correct\n"
"\n"
;
  }

  static const char* value(const ::scara_command::CheckKinFKResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scara_command::CheckKinFKResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state_x);
      stream.next(m.state_y);
      stream.next(m.state_z);
      stream.next(m.state_phi);
      stream.next(m.state_theta);
      stream.next(m.state_psi);
      stream.next(m.fk_x);
      stream.next(m.fk_y);
      stream.next(m.fk_z);
      stream.next(m.fk_phi);
      stream.next(m.fk_theta);
      stream.next(m.fk_psi);
      stream.next(m.correct);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CheckKinFKResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scara_command::CheckKinFKResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scara_command::CheckKinFKResponse_<ContainerAllocator>& v)
  {
    s << indent << "state_x: ";
    Printer<float>::stream(s, indent + "  ", v.state_x);
    s << indent << "state_y: ";
    Printer<float>::stream(s, indent + "  ", v.state_y);
    s << indent << "state_z: ";
    Printer<float>::stream(s, indent + "  ", v.state_z);
    s << indent << "state_phi: ";
    Printer<float>::stream(s, indent + "  ", v.state_phi);
    s << indent << "state_theta: ";
    Printer<float>::stream(s, indent + "  ", v.state_theta);
    s << indent << "state_psi: ";
    Printer<float>::stream(s, indent + "  ", v.state_psi);
    s << indent << "fk_x: ";
    Printer<float>::stream(s, indent + "  ", v.fk_x);
    s << indent << "fk_y: ";
    Printer<float>::stream(s, indent + "  ", v.fk_y);
    s << indent << "fk_z: ";
    Printer<float>::stream(s, indent + "  ", v.fk_z);
    s << indent << "fk_phi: ";
    Printer<float>::stream(s, indent + "  ", v.fk_phi);
    s << indent << "fk_theta: ";
    Printer<float>::stream(s, indent + "  ", v.fk_theta);
    s << indent << "fk_psi: ";
    Printer<float>::stream(s, indent + "  ", v.fk_psi);
    s << indent << "correct: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.correct);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCARA_COMMAND_MESSAGE_CHECKKINFKRESPONSE_H
