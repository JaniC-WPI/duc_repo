// Generated by gencpp from file scara_command/SetJointRefRequest.msg
// DO NOT EDIT!


#ifndef SCARA_COMMAND_MESSAGE_SETJOINTREFREQUEST_H
#define SCARA_COMMAND_MESSAGE_SETJOINTREFREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace scara_command
{
template <class ContainerAllocator>
struct SetJointRefRequest_
{
  typedef SetJointRefRequest_<ContainerAllocator> Type;

  SetJointRefRequest_()
    : joint_name()
    , ref(0.0)  {
    }
  SetJointRefRequest_(const ContainerAllocator& _alloc)
    : joint_name(_alloc)
    , ref(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _joint_name_type;
  _joint_name_type joint_name;

   typedef double _ref_type;
  _ref_type ref;





  typedef boost::shared_ptr< ::scara_command::SetJointRefRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scara_command::SetJointRefRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetJointRefRequest_

typedef ::scara_command::SetJointRefRequest_<std::allocator<void> > SetJointRefRequest;

typedef boost::shared_ptr< ::scara_command::SetJointRefRequest > SetJointRefRequestPtr;
typedef boost::shared_ptr< ::scara_command::SetJointRefRequest const> SetJointRefRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scara_command::SetJointRefRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scara_command::SetJointRefRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::scara_command::SetJointRefRequest_<ContainerAllocator1> & lhs, const ::scara_command::SetJointRefRequest_<ContainerAllocator2> & rhs)
{
  return lhs.joint_name == rhs.joint_name &&
    lhs.ref == rhs.ref;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::scara_command::SetJointRefRequest_<ContainerAllocator1> & lhs, const ::scara_command::SetJointRefRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace scara_command

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::scara_command::SetJointRefRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scara_command::SetJointRefRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scara_command::SetJointRefRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scara_command::SetJointRefRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scara_command::SetJointRefRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scara_command::SetJointRefRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scara_command::SetJointRefRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "08c27f22be83ece63c336a3d1c6227e6";
  }

  static const char* value(const ::scara_command::SetJointRefRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x08c27f22be83ece6ULL;
  static const uint64_t static_value2 = 0x3c336a3d1c6227e6ULL;
};

template<class ContainerAllocator>
struct DataType< ::scara_command::SetJointRefRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scara_command/SetJointRefRequest";
  }

  static const char* value(const ::scara_command::SetJointRefRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scara_command::SetJointRefRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string joint_name\n"
"float64 ref\n"
;
  }

  static const char* value(const ::scara_command::SetJointRefRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scara_command::SetJointRefRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_name);
      stream.next(m.ref);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetJointRefRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scara_command::SetJointRefRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scara_command::SetJointRefRequest_<ContainerAllocator>& v)
  {
    s << indent << "joint_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.joint_name);
    s << indent << "ref: ";
    Printer<double>::stream(s, indent + "  ", v.ref);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCARA_COMMAND_MESSAGE_SETJOINTREFREQUEST_H
