// Generated by gencpp from file scara_command/ScaraKinFKResponse.msg
// DO NOT EDIT!


#ifndef SCARA_COMMAND_MESSAGE_SCARAKINFKRESPONSE_H
#define SCARA_COMMAND_MESSAGE_SCARAKINFKRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace scara_command
{
template <class ContainerAllocator>
struct ScaraKinFKResponse_
{
  typedef ScaraKinFKResponse_<ContainerAllocator> Type;

  ScaraKinFKResponse_()
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , phi(0.0)
    , theta(0.0)
    , psi(0.0)  {
    }
  ScaraKinFKResponse_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , phi(0.0)
    , theta(0.0)
    , psi(0.0)  {
  (void)_alloc;
    }



   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;

   typedef float _phi_type;
  _phi_type phi;

   typedef float _theta_type;
  _theta_type theta;

   typedef float _psi_type;
  _psi_type psi;





  typedef boost::shared_ptr< ::scara_command::ScaraKinFKResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scara_command::ScaraKinFKResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ScaraKinFKResponse_

typedef ::scara_command::ScaraKinFKResponse_<std::allocator<void> > ScaraKinFKResponse;

typedef boost::shared_ptr< ::scara_command::ScaraKinFKResponse > ScaraKinFKResponsePtr;
typedef boost::shared_ptr< ::scara_command::ScaraKinFKResponse const> ScaraKinFKResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scara_command::ScaraKinFKResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scara_command::ScaraKinFKResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::scara_command::ScaraKinFKResponse_<ContainerAllocator1> & lhs, const ::scara_command::ScaraKinFKResponse_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.phi == rhs.phi &&
    lhs.theta == rhs.theta &&
    lhs.psi == rhs.psi;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::scara_command::ScaraKinFKResponse_<ContainerAllocator1> & lhs, const ::scara_command::ScaraKinFKResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace scara_command

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::scara_command::ScaraKinFKResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scara_command::ScaraKinFKResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scara_command::ScaraKinFKResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scara_command::ScaraKinFKResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scara_command::ScaraKinFKResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scara_command::ScaraKinFKResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scara_command::ScaraKinFKResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "380497882d6ff6db47d1daa465b21908";
  }

  static const char* value(const ::scara_command::ScaraKinFKResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x380497882d6ff6dbULL;
  static const uint64_t static_value2 = 0x47d1daa465b21908ULL;
};

template<class ContainerAllocator>
struct DataType< ::scara_command::ScaraKinFKResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scara_command/ScaraKinFKResponse";
  }

  static const char* value(const ::scara_command::ScaraKinFKResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scara_command::ScaraKinFKResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x\n"
"float32 y\n"
"float32 z\n"
"float32 phi\n"
"float32 theta\n"
"float32 psi\n"
;
  }

  static const char* value(const ::scara_command::ScaraKinFKResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scara_command::ScaraKinFKResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.phi);
      stream.next(m.theta);
      stream.next(m.psi);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ScaraKinFKResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scara_command::ScaraKinFKResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scara_command::ScaraKinFKResponse_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "phi: ";
    Printer<float>::stream(s, indent + "  ", v.phi);
    s << indent << "theta: ";
    Printer<float>::stream(s, indent + "  ", v.theta);
    s << indent << "psi: ";
    Printer<float>::stream(s, indent + "  ", v.psi);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCARA_COMMAND_MESSAGE_SCARAKINFKRESPONSE_H
