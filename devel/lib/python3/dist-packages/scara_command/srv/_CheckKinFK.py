# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from scara_command/CheckKinFKRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CheckKinFKRequest(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "scara_command/CheckKinFKRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CheckKinFKRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from scara_command/CheckKinFKResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CheckKinFKResponse(genpy.Message):
  _md5sum = "6dd4bd6e62545926c2a7502c0ee7c4f1"
  _type = "scara_command/CheckKinFKResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 state_x
float32 state_y
float32 state_z
float32 state_phi
float32 state_theta
float32 state_psi
float32 fk_x
float32 fk_y
float32 fk_z
float32 fk_phi
float32 fk_theta
float32 fk_psi
bool correct

"""
  __slots__ = ['state_x','state_y','state_z','state_phi','state_theta','state_psi','fk_x','fk_y','fk_z','fk_phi','fk_theta','fk_psi','correct']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       state_x,state_y,state_z,state_phi,state_theta,state_psi,fk_x,fk_y,fk_z,fk_phi,fk_theta,fk_psi,correct

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CheckKinFKResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.state_x is None:
        self.state_x = 0.
      if self.state_y is None:
        self.state_y = 0.
      if self.state_z is None:
        self.state_z = 0.
      if self.state_phi is None:
        self.state_phi = 0.
      if self.state_theta is None:
        self.state_theta = 0.
      if self.state_psi is None:
        self.state_psi = 0.
      if self.fk_x is None:
        self.fk_x = 0.
      if self.fk_y is None:
        self.fk_y = 0.
      if self.fk_z is None:
        self.fk_z = 0.
      if self.fk_phi is None:
        self.fk_phi = 0.
      if self.fk_theta is None:
        self.fk_theta = 0.
      if self.fk_psi is None:
        self.fk_psi = 0.
      if self.correct is None:
        self.correct = False
    else:
      self.state_x = 0.
      self.state_y = 0.
      self.state_z = 0.
      self.state_phi = 0.
      self.state_theta = 0.
      self.state_psi = 0.
      self.fk_x = 0.
      self.fk_y = 0.
      self.fk_z = 0.
      self.fk_phi = 0.
      self.fk_theta = 0.
      self.fk_psi = 0.
      self.correct = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_12fB().pack(_x.state_x, _x.state_y, _x.state_z, _x.state_phi, _x.state_theta, _x.state_psi, _x.fk_x, _x.fk_y, _x.fk_z, _x.fk_phi, _x.fk_theta, _x.fk_psi, _x.correct))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 49
      (_x.state_x, _x.state_y, _x.state_z, _x.state_phi, _x.state_theta, _x.state_psi, _x.fk_x, _x.fk_y, _x.fk_z, _x.fk_phi, _x.fk_theta, _x.fk_psi, _x.correct,) = _get_struct_12fB().unpack(str[start:end])
      self.correct = bool(self.correct)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_12fB().pack(_x.state_x, _x.state_y, _x.state_z, _x.state_phi, _x.state_theta, _x.state_psi, _x.fk_x, _x.fk_y, _x.fk_z, _x.fk_phi, _x.fk_theta, _x.fk_psi, _x.correct))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 49
      (_x.state_x, _x.state_y, _x.state_z, _x.state_phi, _x.state_theta, _x.state_psi, _x.fk_x, _x.fk_y, _x.fk_z, _x.fk_phi, _x.fk_theta, _x.fk_psi, _x.correct,) = _get_struct_12fB().unpack(str[start:end])
      self.correct = bool(self.correct)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12fB = None
def _get_struct_12fB():
    global _struct_12fB
    if _struct_12fB is None:
        _struct_12fB = struct.Struct("<12fB")
    return _struct_12fB
class CheckKinFK(object):
  _type          = 'scara_command/CheckKinFK'
  _md5sum = '6dd4bd6e62545926c2a7502c0ee7c4f1'
  _request_class  = CheckKinFKRequest
  _response_class = CheckKinFKResponse
