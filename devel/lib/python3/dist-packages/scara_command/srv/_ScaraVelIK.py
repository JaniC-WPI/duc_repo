# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from scara_command/ScaraVelIKRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ScaraVelIKRequest(genpy.Message):
  _md5sum = "9a7f08bc2df9b68690007784109f3edc"
  _type = "scara_command/ScaraVelIKRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 q1
float32 q2
float32 q3
float32 Vx
float32 Vy
float32 Vz
float32 Wx
float32 Wy
float32 Wz
"""
  __slots__ = ['q1','q2','q3','Vx','Vy','Vz','Wx','Wy','Wz']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       q1,q2,q3,Vx,Vy,Vz,Wx,Wy,Wz

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ScaraVelIKRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.q1 is None:
        self.q1 = 0.
      if self.q2 is None:
        self.q2 = 0.
      if self.q3 is None:
        self.q3 = 0.
      if self.Vx is None:
        self.Vx = 0.
      if self.Vy is None:
        self.Vy = 0.
      if self.Vz is None:
        self.Vz = 0.
      if self.Wx is None:
        self.Wx = 0.
      if self.Wy is None:
        self.Wy = 0.
      if self.Wz is None:
        self.Wz = 0.
    else:
      self.q1 = 0.
      self.q2 = 0.
      self.q3 = 0.
      self.Vx = 0.
      self.Vy = 0.
      self.Vz = 0.
      self.Wx = 0.
      self.Wy = 0.
      self.Wz = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9f().pack(_x.q1, _x.q2, _x.q3, _x.Vx, _x.Vy, _x.Vz, _x.Wx, _x.Wy, _x.Wz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.q1, _x.q2, _x.q3, _x.Vx, _x.Vy, _x.Vz, _x.Wx, _x.Wy, _x.Wz,) = _get_struct_9f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9f().pack(_x.q1, _x.q2, _x.q3, _x.Vx, _x.Vy, _x.Vz, _x.Wx, _x.Wy, _x.Wz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.q1, _x.q2, _x.q3, _x.Vx, _x.Vy, _x.Vz, _x.Wx, _x.Wy, _x.Wz,) = _get_struct_9f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9f = None
def _get_struct_9f():
    global _struct_9f
    if _struct_9f is None:
        _struct_9f = struct.Struct("<9f")
    return _struct_9f
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from scara_command/ScaraVelIKResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ScaraVelIKResponse(genpy.Message):
  _md5sum = "7a1167ccfb083ccdaf6e453d6a0272a3"
  _type = "scara_command/ScaraVelIKResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool success
float32 q1_dot
float32 q2_dot
float32 q3_dot

"""
  __slots__ = ['success','q1_dot','q2_dot','q3_dot']
  _slot_types = ['bool','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success,q1_dot,q2_dot,q3_dot

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ScaraVelIKResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
      if self.q1_dot is None:
        self.q1_dot = 0.
      if self.q2_dot is None:
        self.q2_dot = 0.
      if self.q3_dot is None:
        self.q3_dot = 0.
    else:
      self.success = False
      self.q1_dot = 0.
      self.q2_dot = 0.
      self.q3_dot = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B3f().pack(_x.success, _x.q1_dot, _x.q2_dot, _x.q3_dot))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.success, _x.q1_dot, _x.q2_dot, _x.q3_dot,) = _get_struct_B3f().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B3f().pack(_x.success, _x.q1_dot, _x.q2_dot, _x.q3_dot))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.success, _x.q1_dot, _x.q2_dot, _x.q3_dot,) = _get_struct_B3f().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B3f = None
def _get_struct_B3f():
    global _struct_B3f
    if _struct_B3f is None:
        _struct_B3f = struct.Struct("<B3f")
    return _struct_B3f
class ScaraVelIK(object):
  _type          = 'scara_command/ScaraVelIK'
  _md5sum = '273c8e596b5ffa32d13cf21237d3aaf2'
  _request_class  = ScaraVelIKRequest
  _response_class = ScaraVelIKResponse
