vsbot :
  # # Publish all joint states -----------------------------------
  # joint_state_controller:
  #   type: joint_state_controller/JointStateController
  #   publish_rate: 30  

  # # Velocity Controllers ------------------------------------
  # joint1_velocity_controller:
  #   type: velocity_controllers/JointVelocityController
  #   joint: joint1
  #   pid: {p: 100.0, i: 0.01, d: 10.0}                         #pid: {p: 100.0, i: 0.01, d: 10.0}
  # joint2_velocity_controller:
  #   type: velocity_controllers/JointVelocityController
  #   joint: joint2
  #   pid: {p: 100.0, i: 0.01, d: 10.0}
  
  # # Position Controllers ------------------------------------
  # joint1_position_controller:
  #   type: velocity_controllers/JointPositionController
  #   joint: joint1
  #   pid: {p: 1.0, i: 0.00, d: 0.1}

  # joint2_position_controller:
  #   type: velocity_controllers/JointPositionController
  #   joint: joint2
  #   pid: {p: 1.0, i: 0.00, d: 0.1}

# Deep learning parameters
  deeplearning:
    # weights_path: '/home/jc-merlab/Pictures/Data/trained_models/keypointsrcnn_weights_ld_b1_e25_v2.pth'
    weights_path: '/home/jc-merlab/Pictures/Data/trained_models/keypointsrcnn_planning_b2_e100_v4.pth'

# Jacobian Estimation Parameters ------------------------------------
  estimation:
    epsilon: 1.0e-5 # update threshold or convergence condition
    gamma:   10 # learning rate
    gamma2: 1.0e-5 # learning rate during servoing
    window: 20 # window size
    amplitude: 0.1 # amplitude for initial sin velocities
    rate: 10 # initialization loop rate

  control:
    # saturation: 20    # 2 joints
    saturation: 20   # 3 joints
    # no_of_actuators: 2
    # no_of_features: 2
    # gain_sm: -3
    # rate: 10 # control loop rate
    thresh1: 20 # visual servoing convergence threshold
    thresh2: 5
    # goal_pos_x: 324
    # goal_pos_y: 206
    # window: 20 # window size
    # lam: -10.0e-4 # servoing gain
    lam: -0.3 # for 2 joints
    jacobian: [19, 47, -79,  7, 89, -13, 71, -59, -23, 61, 41, -67,  -3,  2, -11, 29, -43, -31, 73, 17, -5, 83, 37, 53]
    gains1: [-0.8, -0.8, -0.8, -0.8, -1.5, -1.5, -0.5, -0.5] # for 3 joints
    gains2: [-0.3, -0.3, -0.3, -0.3, -1.5, -1.5, -1.0, -1.0] # for 3 joints

# Shape Servoing Parameters -------------------------------------------
  
  shape_control:     
    no_of_features: 8
    no_of_actuators: 3
    num_of_segments: 2
    degree: 2
    beta: 1.0 # threshold for selective Jacobian updates
    joint2_goal: -0.50
    joint4_goal: -1.05
    ############### ref 3 2/18/22 in franka desk #######
    # goal_features: [188.64980355218717, 95.64862776116439, 130.0, 65.0] 
                    # vector for storing goal features
                    # discarding last two features
                    # to be consistent with rest of the code
                    

# Goal Position for End Effector ------------------------------------

  # vs_baseline:

  #    goal_position_x: 96 # x co-ordinates 
  #    goal_position_y: 166 # Y co-ordinates
  #    pub_rate: 10 # image Publisher rate
  #    j2_gain: 1
  #    j4_gain: 1
  #    xdot_gain: 0.001
  #    ydot_gain: 0.001

 # Restriction to Depth skeleton

  depth_baseline:
  
    cropper: [0, 348, 637, 132]    # to crop the depth image
    dmin: 3 # to constrain the minimum intensity for depth image segmentation
    dmax: 5 # to constrain the maximum intensity for depth image segmentation
    kernel1: 9
    kernel2: 9

# start_goal_pose_details:
  # start_config = np.array([[269, 431], [272, 315],  [313, 216], [339, 226], [432, 322], [465, 323]]) 
    # goal_config = np.array([[267, 432], [271, 315], [252, 210], [278, 204], [331, 85], [358, 72]])

    # SAFE_ZONE = 50  # Safe distance from the obstacle
    # obstacle_center = (435, 153)
    # half_diagonal = 20

# [[[272.0, 315.0], [172.0, 287.0], [178.0, 262.0], [149.0, 139.0], [119.0, 130.0]], [[268.0, 314.0], [187.0, 250.0], [203.0, 228.0], [187.0, 104.0], [164.0, 92.0]], [[268.0, 314.0], [187.0, 250.0], [203.0, 228.0], [226.0, 102.0], [207.0, 83.0]], [[268.0, 314.0], [221.0, 221.0], [245.0, 208.0], [352.0, 131.0], [346.0, 104.0]], [[268.0, 314.0], [261.0, 208.0], [288.0, 206.0], [420.0, 178.0], [425.0, 148.0]], [[268.0, 314.0], [280.0, 208.0], [307.0, 210.0], [442.0, 206.0], [462.0, 183.0]], [[268.0, 314.0], [280.0, 208.0], [307.0, 210.0], [442.0, 206.0], [471.0, 193.0]]]
  
  